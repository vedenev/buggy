#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug 21 10:45:52 2020

@author: vedenev
"""

import numpy as np
import matplotlib.pyplot as plt 

mtx = np.array([[617.8249050804442, 0.0, 673.0536941293645], [0.0, 619.3492046143635, 497.9661474464693], [0.0, 0.0, 1.0]])
dist = np.array([[-0.3123562037471547, 0.1018281655721802, 0.00031297833728767365, 0.0007424882126541622, -0.015160446251882953]])

k1 = dist[0, 0]
k2 = dist[0, 1]
p1 = dist[0, 2]
p2 = dist[0, 3]
k3 = dist[0, 4]

fx = mtx[0, 0]
fy = mtx[1, 1]
cx = mtx[0, 2]
cy = mtx[1, 2]

#r2 = xs**2
#xss = xs * (1 + k1 * r2 + k2 * r4 + k3 * r6) + p2 * (r2 + 2 * xs**2)
#xss = xs * (1 + k1 * xs**2 + k2 * xs**4 + k3 * xs**6) + p2 * (xs**2 + 2 * xs**2)
#xss = xs * (1 + 3*p2*xs +  k1 * xs**2  + k2 * xs**4 + k3 * xs**6)
a = 3*p2
b = k1
c = k2
d = k3


# install maxima in Ubuntu: sudo apt-get install maxima
#load ("revert")$
#t: taylor (tan(x)*(1 + a * tan(x) + b*tan(x)**2 + c*tan(x)**4 + d*tan(x)**6), x, 0, 9);
#string(revert2 (t, x, 11));
#result, ^ replaced, monom-formated:
#(((170100*c-1105650*b**2+(15479100*a**2-170100)*b-19348875*a**4+1105650*a**2+32130)*d+((-1105650*b)+7739550*a**2-85050)*c**2+(5159700*b**3+(1105650-116093250*a**2)*b**2+(309582000*a**4-15479100*a**2+170100)*b-175429800*a**6+19348875*a**4-1105650*a**2+35850)*c-3869775*b**5+(154791000*a**2-1289925)*b**4+((-877149000*a**4)+38697750*a**2-368550)*b**3+(1578868200*a**6-154791000*a**4+7739550*a**2-85050)*b**2+((-1071374850*a**8)+175429800*a**6-19348875*a**4+1105650*a**2-10329)*b+238083300*a**10-56388150*a**8+10319400*a**6-1289925*a**4+68466*a**2-1163)*x**11)/14175
#-(((1871100*a*b-4054050*a**3+155925*a)*d+935550*a*c**2+((-12162150*a*b**2)+(56756700*a**3-1871100*a)*b-42567525*a**5+4054050*a**3-155925*a)*c+14189175*a*b**4+(4054050*a-141891750*a**3)*b**3+(340540200*a**5-28378350*a**3+935550*a)*b**2+((-275675400*a**7)+42567525*a**5-4054050*a**3+155925*a)*b+68918850*a**9-16216200*a**7+2837835*a**5-311850*a**3+12793*a)*x**10)/14175
#+(((90*b-495*a**2+9)*d+45*c**2+((-495*b**2)+(5940*a**2-90)*b-6435*a**4+495*a**2-9)*c+495*b**4+(165-12870*a**2)*b**3+(45045*a**4-2970*a**2+45)*b**2+((-45045*a**6)+6435*a**4-495*a**2+9)*b+12870*a**8-3003*a**6+495*a**4-45*a**2+1)*x**9)/9
#+(9*a*d+((-90*a*b)+165*a**3-9*a)*c+165*a*b**3+(45*a-990*a**3)*b**2+(1287*a**5-165*a**3+9*a)*b-429*a**7+99*a**5-15*a**3+a)*x**8
#-((7*d+((-56*b)+252*a**2-7)*c+84*b**3+(28-1260*a**2)*b**2+(2310*a**4-252*a**2+7)*b-924*a**6+210*a**4-28*a**2+1)*x**7)/7
#+((21*a*c-84*a*b**2+(252*a**3-21*a)*b-126*a**5+28*a**3-3*a)*x**6)/3
#-((5*c-15*b**2+(105*a**2-5)*b-70*a**4+15*a**2-1)*x**5)/5
#+(5*a*b-5*a**3+a)*x**4
#-((3*b-6*a**2+1)*x**3)/3
#-a*x**2
#+x

coefficients_i =[(((170100*c-1105650*b**2+(15479100*a**2-170100)*b-19348875*a**4+1105650*a**2+32130)*d+((-1105650*b)+7739550*a**2-85050)*c**2+(5159700*b**3+(1105650-116093250*a**2)*b**2+(309582000*a**4-15479100*a**2+170100)*b-175429800*a**6+19348875*a**4-1105650*a**2+35850)*c-3869775*b**5+(154791000*a**2-1289925)*b**4+((-877149000*a**4)+38697750*a**2-368550)*b**3+(1578868200*a**6-154791000*a**4+7739550*a**2-85050)*b**2+((-1071374850*a**8)+175429800*a**6-19348875*a**4+1105650*a**2-10329)*b+238083300*a**10-56388150*a**8+10319400*a**6-1289925*a**4+68466*a**2-1163))/14175,
-(((1871100*a*b-4054050*a**3+155925*a)*d+935550*a*c**2+((-12162150*a*b**2)+(56756700*a**3-1871100*a)*b-42567525*a**5+4054050*a**3-155925*a)*c+14189175*a*b**4+(4054050*a-141891750*a**3)*b**3+(340540200*a**5-28378350*a**3+935550*a)*b**2+((-275675400*a**7)+42567525*a**5-4054050*a**3+155925*a)*b+68918850*a**9-16216200*a**7+2837835*a**5-311850*a**3+12793*a))/14175,
+(((90*b-495*a**2+9)*d+45*c**2+((-495*b**2)+(5940*a**2-90)*b-6435*a**4+495*a**2-9)*c+495*b**4+(165-12870*a**2)*b**3+(45045*a**4-2970*a**2+45)*b**2+((-45045*a**6)+6435*a**4-495*a**2+9)*b+12870*a**8-3003*a**6+495*a**4-45*a**2+1))/9,
+(9*a*d+((-90*a*b)+165*a**3-9*a)*c+165*a*b**3+(45*a-990*a**3)*b**2+(1287*a**5-165*a**3+9*a)*b-429*a**7+99*a**5-15*a**3+a),
-((7*d+((-56*b)+252*a**2-7)*c+84*b**3+(28-1260*a**2)*b**2+(2310*a**4-252*a**2+7)*b-924*a**6+210*a**4-28*a**2+1))/7,
+((21*a*c-84*a*b**2+(252*a**3-21*a)*b-126*a**5+28*a**3-3*a))/3,
-((5*c-15*b**2+(105*a**2-5)*b-70*a**4+15*a**2-1))/5,
+(5*a*b-5*a**3+a),
-((3*b-6*a**2+1))/3,
-a,
+1]

coefficients_i = coefficients_i[::-1]


alpha = np.linspace(-np.pi / 3, np.pi / 3, 101)
   
#xs = x / z
# tan(alpha) = x / z = xs

xs = np.tan(alpha)
ys = 0.0

r2 = xs ** 2 + ys ** 2
r4 = r2 ** 2
r6 = r4 * r2
xss = xs * (1 + k1 * r2 + k2 * r4 + k3 * r6) + p2 * (r2 + 2 * xs**2)
yss = p1 * (r2 + 2 * ys**2)

u = fx * xss + cx
v = fy * yss + cy

#imshow_bgr(img)
#plt.plot(u, v, 'r.')


#ui = np.linspace(0, 1280, 101)
ui = u
xssi = (ui - cx) / fx
#alpha = xssi * (1 + ai * xssi + bi * xssi**2 + ci * xssi**3 + di * xssi**4 + ei * xssi**5 + fi * xssi**6 + gi * xssi**7)
#alphai = xssi * (1 + ai * xssi + bi * xssi**2 + ci * xssi**3 + di * xssi**4 + ei * xssi**5 + fi * xssi**6)
alphai = coefficients_i[0] * xssi
xssi_power = np.copy(xssi)
for order_index in range(1, 11):
    xssi_power *= xssi
    alphai += coefficients_i[order_index] * xssi_power
    #alphai += coefficients_i[order_index] * (xssi ** (order_index + 1))
    
    
    
alphai_linear = 1.02 * xssi
plt.subplot(1, 2, 1)
plt.plot(u, (180 / np.pi) * alpha, 'r-')
plt.plot(ui, (180 / np.pi) * alphai, 'k-')
#plt.plot(ui, alphai_linear, 'g-')

plt.subplot(1, 2, 2)
plt.plot(ui, (180 / np.pi) * (alpha - alphai), 'k-')
#plt.plot(ui, alpha - alphai_linear, 'g-')

